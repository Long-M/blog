<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ml.blog.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.ml.blog.entity.User">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="gender" jdbcType="INTEGER" property="gender" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="recent_login_time" jdbcType="TIMESTAMP" property="recentLoginTime" />
  </resultMap>
  <sql id="Base_Column_List">
    user_id, username, password, email, avatar, gender, create_time, recent_login_time
  </sql>
  <select id="getUser" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteUser" parameterType="java.lang.Integer">
    delete from user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insertUser" parameterType="com.ml.blog.entity.User">
    insert into user (user_id, username, password,
      email, avatar, gender, 
      create_time, recent_login_time
      )
    values (#{userId,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, #{gender,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{recentLoginTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <update id="updateUser" parameterType="com.ml.blog.entity.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      recent_login_time = #{recentLoginTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <select id="getUserByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where username = #{username,jdbcType=VARCHAR}
  </select>
  <select id="getRoleByUsername" resultType="java.lang.String">
    select
      role_name
    from role r
           left join user_role ur on ur.role_id = r.role_id
           left join user u on ur.user_id = u.user_id
    where u.username = #{username,jdbcType=VARCHAR}
  </select>
  <select id="getAuthorityByRoleNames" resultType="java.lang.String">
    select
    url
    from menu m
    left join role_menu rm on rm.menu_id = m.menu_id
    left join role r on rm.role_id = r.role_id
    where r.role_name
    in
    <foreach collection="roleNames" item="roleName" open="(" separator="," close=")">
      #{roleName,,jdbcType=VARCHAR}
    </foreach>
  </select>
  <select id="listUsers" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
  </select>
</mapper>